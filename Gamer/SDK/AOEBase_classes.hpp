#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AOEBase

#include "Basic.hpp"

#include "M1_structs.hpp"
#include "M1_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AOEBase.AOEBase_C
// 0x0160 (0x0830 - 0x06D0)
class AAOEBase_C : public AM1AbilityActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      AOE_FX;                                            // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        StartDelay;                                        // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        AOE_Radius;                                        // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Dur_LifeTime;                                      // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        HitInterval;                                       // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeOutTime;                                       // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OverlapCheckInterval;                              // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class AActor*, double>                   HitIntervalTargets;                                // 0x0718(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance)
	struct FTimerHandle                           OverlapCheckerTimer;                               // 0x0768(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bDoInitialOverlapCheck;                            // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_771[0x7];                                      // 0x0771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DurationEndTimer;                                  // 0x0778(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FM1AbilityAutoExecuteTags              AutoExecutionTags;                                 // 0x0780(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAkAudioEvent*                          AOEFadeInAkEvent;                                  // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AOEFadeOutAkEvent;                                 // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnPostSpawnAbilityActor();
	void CheckHitInterval(TArray<class AActor*>& OverlappedTargets, TArray<class AActor*>* OutExecuteTargets);
	void Clear();
	void DebugDrawHitCheckRange();
	void Event_EndOfDuration();
	void ExecuteHitInterval(class AActor* ExecuteTarget);
	void ExecuteUbergraph_AOEBase(int32 EntryPoint);
	void FindOverlapActors(TArray<class AActor*>* OutActors);
	void GetDecalSize(double* OutSize);
	void GetRemainDuration(double* OutRemainDuration);
	void InitializeFxParams();
	void OnEndOfDuration();
	void OverlapChecker();
	void StartFadeIn();
	void StartFadeOut();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AOEBase_C">();
	}
	static class AAOEBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAOEBase_C>();
	}
};
static_assert(alignof(AAOEBase_C) == 0x000008, "Wrong alignment on AAOEBase_C");
static_assert(sizeof(AAOEBase_C) == 0x000830, "Wrong size on AAOEBase_C");
static_assert(offsetof(AAOEBase_C, UberGraphFrame) == 0x0006D0, "Member 'AAOEBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, AOE_FX) == 0x0006D8, "Member 'AAOEBase_C::AOE_FX' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, Sphere) == 0x0006E0, "Member 'AAOEBase_C::Sphere' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, StartDelay) == 0x0006E8, "Member 'AAOEBase_C::StartDelay' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, AOE_Radius) == 0x0006F0, "Member 'AAOEBase_C::AOE_Radius' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, Dur_LifeTime) == 0x0006F8, "Member 'AAOEBase_C::Dur_LifeTime' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, HitInterval) == 0x000700, "Member 'AAOEBase_C::HitInterval' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, FadeOutTime) == 0x000708, "Member 'AAOEBase_C::FadeOutTime' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, OverlapCheckInterval) == 0x000710, "Member 'AAOEBase_C::OverlapCheckInterval' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, HitIntervalTargets) == 0x000718, "Member 'AAOEBase_C::HitIntervalTargets' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, OverlapCheckerTimer) == 0x000768, "Member 'AAOEBase_C::OverlapCheckerTimer' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, bDoInitialOverlapCheck) == 0x000770, "Member 'AAOEBase_C::bDoInitialOverlapCheck' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, DurationEndTimer) == 0x000778, "Member 'AAOEBase_C::DurationEndTimer' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, AutoExecutionTags) == 0x000780, "Member 'AAOEBase_C::AutoExecutionTags' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, AOEFadeInAkEvent) == 0x000820, "Member 'AAOEBase_C::AOEFadeInAkEvent' has a wrong offset!");
static_assert(offsetof(AAOEBase_C, AOEFadeOutAkEvent) == 0x000828, "Member 'AAOEBase_C::AOEFadeOutAkEvent' has a wrong offset!");

}

