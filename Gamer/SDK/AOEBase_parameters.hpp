#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AOEBase

#include "Basic.hpp"

#include "M1Data_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "M1_structs.hpp"


namespace SDK::Params
{

// Function AOEBase.AOEBase_C.CheckHitInterval
// 0x00E0 (0x00E0 - 0x0000)
struct AOEBase_C_CheckHitInterval final
{
public:
	TArray<class AActor*>                         OverlappedTargets;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class AActor*>                         OutExecuteTargets;                                 // 0x0010(0x0010)(Parm, OutParm)
	TArray<class AActor*>                         ExecuteTargets;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TMap<class AActor*, double>                   SavedHitIntervalTargets;                           // 0x0030(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeSinceCreation_ReturnValue;     // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Map_Find_Value;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeSinceCreation_ReturnValue_1;   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Map_Add_Value_ImplicitCast;               // 0x00D8(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AOEBase_C_CheckHitInterval) == 0x000008, "Wrong alignment on AOEBase_C_CheckHitInterval");
static_assert(sizeof(AOEBase_C_CheckHitInterval) == 0x0000E0, "Wrong size on AOEBase_C_CheckHitInterval");
static_assert(offsetof(AOEBase_C_CheckHitInterval, OverlappedTargets) == 0x000000, "Member 'AOEBase_C_CheckHitInterval::OverlappedTargets' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, OutExecuteTargets) == 0x000010, "Member 'AOEBase_C_CheckHitInterval::OutExecuteTargets' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, ExecuteTargets) == 0x000020, "Member 'AOEBase_C_CheckHitInterval::ExecuteTargets' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, SavedHitIntervalTargets) == 0x000030, "Member 'AOEBase_C_CheckHitInterval::SavedHitIntervalTargets' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, Temp_int_Array_Index_Variable) == 0x000080, "Member 'AOEBase_C_CheckHitInterval::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Array_Get_Item) == 0x000088, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, Temp_int_Loop_Counter_Variable) == 0x000090, "Member 'AOEBase_C_CheckHitInterval::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Array_AddUnique_ReturnValue) == 0x000094, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_GetGameTimeSinceCreation_ReturnValue) == 0x0000A0, "Member 'AOEBase_C_CheckHitInterval::CallFunc_GetGameTimeSinceCreation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Array_AddUnique_ReturnValue_1) == 0x0000A4, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Map_Find_Value) == 0x0000A8, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Map_Find_ReturnValue) == 0x0000B0, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_GetGameTimeSinceCreation_ReturnValue_1) == 0x0000CC, "Member 'AOEBase_C_CheckHitInterval::CallFunc_GetGameTimeSinceCreation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x0000D0, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AOEBase_C_CheckHitInterval, CallFunc_Map_Add_Value_ImplicitCast) == 0x0000D8, "Member 'AOEBase_C_CheckHitInterval::CallFunc_Map_Add_Value_ImplicitCast' has a wrong offset!");

// Function AOEBase.AOEBase_C.DebugDrawHitCheckRange
// 0x0014 (0x0014 - 0x0000)
struct AOEBase_C_DebugDrawHitCheckRange final
{
public:
	bool                                          CallFunc_CheatIsAbilityDrawDebug_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DrawDebugSphere_Duration_ImplicitCast;    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AOEBase_C_DebugDrawHitCheckRange) == 0x000004, "Wrong alignment on AOEBase_C_DebugDrawHitCheckRange");
static_assert(sizeof(AOEBase_C_DebugDrawHitCheckRange) == 0x000014, "Wrong size on AOEBase_C_DebugDrawHitCheckRange");
static_assert(offsetof(AOEBase_C_DebugDrawHitCheckRange, CallFunc_CheatIsAbilityDrawDebug_ReturnValue) == 0x000000, "Member 'AOEBase_C_DebugDrawHitCheckRange::CallFunc_CheatIsAbilityDrawDebug_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_DebugDrawHitCheckRange, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'AOEBase_C_DebugDrawHitCheckRange::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_DebugDrawHitCheckRange, CallFunc_DrawDebugSphere_Duration_ImplicitCast) == 0x000010, "Member 'AOEBase_C_DebugDrawHitCheckRange::CallFunc_DrawDebugSphere_Duration_ImplicitCast' has a wrong offset!");

// Function AOEBase.AOEBase_C.ExecuteHitInterval
// 0x00A0 (0x00A0 - 0x0000)
struct AOEBase_C_ExecuteHitInterval final
{
public:
	class AActor*                                 ExecuteTarget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FM1TaggedAbilityParamData>      Temp_struct_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TArray<class FName>                           Temp_name_Variable;                                // 0x0018(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AbilityContextHandle                CallFunc_BP_MakeForwardingContext_ReturnValue;     // 0x0038(0x0010)()
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue;       // 0x0050(0x0030)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              CallFunc_SpawnFXsForAbilityToTarget_ReturnValue;   // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FM1AbilityId                           CallFunc_InvokeFirstStatusEffectToTargetByTag_ReturnValue; // 0x0090(0x0010)(HasGetValueTypeHash)
};
static_assert(alignof(AOEBase_C_ExecuteHitInterval) == 0x000010, "Wrong alignment on AOEBase_C_ExecuteHitInterval");
static_assert(sizeof(AOEBase_C_ExecuteHitInterval) == 0x0000A0, "Wrong size on AOEBase_C_ExecuteHitInterval");
static_assert(offsetof(AOEBase_C_ExecuteHitInterval, ExecuteTarget) == 0x000000, "Member 'AOEBase_C_ExecuteHitInterval::ExecuteTarget' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteHitInterval, Temp_struct_Variable) == 0x000008, "Member 'AOEBase_C_ExecuteHitInterval::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteHitInterval, Temp_name_Variable) == 0x000018, "Member 'AOEBase_C_ExecuteHitInterval::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteHitInterval, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'AOEBase_C_ExecuteHitInterval::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteHitInterval, CallFunc_BP_MakeForwardingContext_ReturnValue) == 0x000038, "Member 'AOEBase_C_ExecuteHitInterval::CallFunc_BP_MakeForwardingContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteHitInterval, CallFunc_Conv_VectorToTransform_ReturnValue) == 0x000050, "Member 'AOEBase_C_ExecuteHitInterval::CallFunc_Conv_VectorToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteHitInterval, CallFunc_SpawnFXsForAbilityToTarget_ReturnValue) == 0x000080, "Member 'AOEBase_C_ExecuteHitInterval::CallFunc_SpawnFXsForAbilityToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteHitInterval, CallFunc_InvokeFirstStatusEffectToTargetByTag_ReturnValue) == 0x000090, "Member 'AOEBase_C_ExecuteHitInterval::CallFunc_InvokeFirstStatusEffectToTargetByTag_ReturnValue' has a wrong offset!");

// Function AOEBase.AOEBase_C.ExecuteUbergraph_AOEBase
// 0x0098 (0x0098 - 0x0000)
struct AOEBase_C_ExecuteUbergraph_AOEBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x001C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_FindOverlapActors_OutActors;              // 0x0040(0x0010)(ReferenceParm)
	TArray<class AActor*>                         CallFunc_CheckHitInterval_OutExecuteTargets;       // 0x0050(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0078(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1;  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLifeSpan_InLifespan_ImplicitCast;      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast; // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AOEBase_C_ExecuteUbergraph_AOEBase) == 0x000008, "Wrong alignment on AOEBase_C_ExecuteUbergraph_AOEBase");
static_assert(sizeof(AOEBase_C_ExecuteUbergraph_AOEBase) == 0x000098, "Wrong size on AOEBase_C_ExecuteUbergraph_AOEBase");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, EntryPoint) == 0x000000, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, Temp_int_Array_Index_Variable) == 0x000004, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_HasAuthority_ReturnValue) == 0x000018, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000019, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000030, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_FindOverlapActors_OutActors) == 0x000040, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_FindOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_CheckHitInterval_OutExecuteTargets) == 0x000050, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_CheckHitInterval_OutExecuteTargets' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_Array_Get_Item) == 0x000060, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_IsValid_ReturnValue) == 0x00006C, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_Less_IntInt_ReturnValue) == 0x00006D, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000070, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000078, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_Delay_Duration_ImplicitCast) == 0x000084, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000088, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1) == 0x00008C, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_SetLifeSpan_InLifespan_ImplicitCast) == 0x000090, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_SetLifeSpan_InLifespan_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AOEBase_C_ExecuteUbergraph_AOEBase, CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast) == 0x000094, "Member 'AOEBase_C_ExecuteUbergraph_AOEBase::CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast' has a wrong offset!");

// Function AOEBase.AOEBase_C.FindOverlapActors
// 0x0048 (0x0048 - 0x0000)
struct AOEBase_C_FindOverlapActors final
{
public:
	TArray<class AActor*>                         OutActors;                                         // 0x0000(0x0010)(Parm, OutParm)
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FM1AbilityCollisionTargetingRule       CallFunc_GetTargetingRule_ReturnValue;             // 0x0024(0x000C)(ConstParm, NoDestructor)
	TArray<class AActor*>                         CallFunc_FindActorsInRadius_OutActors;             // 0x0030(0x0010)(ReferenceParm)
	bool                                          CallFunc_FindActorsInRadius_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AOEBase_C_FindOverlapActors) == 0x000008, "Wrong alignment on AOEBase_C_FindOverlapActors");
static_assert(sizeof(AOEBase_C_FindOverlapActors) == 0x000048, "Wrong size on AOEBase_C_FindOverlapActors");
static_assert(offsetof(AOEBase_C_FindOverlapActors, OutActors) == 0x000000, "Member 'AOEBase_C_FindOverlapActors::OutActors' has a wrong offset!");
static_assert(offsetof(AOEBase_C_FindOverlapActors, CallFunc_GetInstigator_ReturnValue) == 0x000010, "Member 'AOEBase_C_FindOverlapActors::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_FindOverlapActors, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'AOEBase_C_FindOverlapActors::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_FindOverlapActors, CallFunc_GetTargetingRule_ReturnValue) == 0x000024, "Member 'AOEBase_C_FindOverlapActors::CallFunc_GetTargetingRule_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_FindOverlapActors, CallFunc_FindActorsInRadius_OutActors) == 0x000030, "Member 'AOEBase_C_FindOverlapActors::CallFunc_FindActorsInRadius_OutActors' has a wrong offset!");
static_assert(offsetof(AOEBase_C_FindOverlapActors, CallFunc_FindActorsInRadius_ReturnValue) == 0x000040, "Member 'AOEBase_C_FindOverlapActors::CallFunc_FindActorsInRadius_ReturnValue' has a wrong offset!");

// Function AOEBase.AOEBase_C.GetDecalSize
// 0x0020 (0x0020 - 0x0000)
struct AOEBase_C_GetDecalSize final
{
public:
	double                                        OutSize;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAOEScaleMultiplier_ReturnValue;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AOEBase_C_GetDecalSize) == 0x000008, "Wrong alignment on AOEBase_C_GetDecalSize");
static_assert(sizeof(AOEBase_C_GetDecalSize) == 0x000020, "Wrong size on AOEBase_C_GetDecalSize");
static_assert(offsetof(AOEBase_C_GetDecalSize, OutSize) == 0x000000, "Member 'AOEBase_C_GetDecalSize::OutSize' has a wrong offset!");
static_assert(offsetof(AOEBase_C_GetDecalSize, CallFunc_GetAOEScaleMultiplier_ReturnValue) == 0x000008, "Member 'AOEBase_C_GetDecalSize::CallFunc_GetAOEScaleMultiplier_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_GetDecalSize, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000010, "Member 'AOEBase_C_GetDecalSize::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_GetDecalSize, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000018, "Member 'AOEBase_C_GetDecalSize::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function AOEBase.AOEBase_C.GetRemainDuration
// 0x0018 (0x0018 - 0x0000)
struct AOEBase_C_GetRemainDuration final
{
public:
	double                                        OutRemainDuration;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_OutRemainDuration_ImplicitCast; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AOEBase_C_GetRemainDuration) == 0x000008, "Wrong alignment on AOEBase_C_GetRemainDuration");
static_assert(sizeof(AOEBase_C_GetRemainDuration) == 0x000018, "Wrong size on AOEBase_C_GetRemainDuration");
static_assert(offsetof(AOEBase_C_GetRemainDuration, OutRemainDuration) == 0x000000, "Member 'AOEBase_C_GetRemainDuration::OutRemainDuration' has a wrong offset!");
static_assert(offsetof(AOEBase_C_GetRemainDuration, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue) == 0x000008, "Member 'AOEBase_C_GetRemainDuration::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_GetRemainDuration, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x00000C, "Member 'AOEBase_C_GetRemainDuration::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_GetRemainDuration, K2Node_FunctionResult_OutRemainDuration_ImplicitCast) == 0x000010, "Member 'AOEBase_C_GetRemainDuration::K2Node_FunctionResult_OutRemainDuration_ImplicitCast' has a wrong offset!");

// Function AOEBase.AOEBase_C.InitializeFxParams
// 0x0020 (0x0020 - 0x0000)
struct AOEBase_C_InitializeFxParams final
{
public:
	double                                        CallFunc_GetDecalSize_OutSize;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDecalSize_OutSize_1;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetFloatParameter_Param_ImplicitCast;     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_Param_ImplicitCast_1;   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AOEBase_C_InitializeFxParams) == 0x000008, "Wrong alignment on AOEBase_C_InitializeFxParams");
static_assert(sizeof(AOEBase_C_InitializeFxParams) == 0x000020, "Wrong size on AOEBase_C_InitializeFxParams");
static_assert(offsetof(AOEBase_C_InitializeFxParams, CallFunc_GetDecalSize_OutSize) == 0x000000, "Member 'AOEBase_C_InitializeFxParams::CallFunc_GetDecalSize_OutSize' has a wrong offset!");
static_assert(offsetof(AOEBase_C_InitializeFxParams, CallFunc_GetDecalSize_OutSize_1) == 0x000008, "Member 'AOEBase_C_InitializeFxParams::CallFunc_GetDecalSize_OutSize_1' has a wrong offset!");
static_assert(offsetof(AOEBase_C_InitializeFxParams, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000010, "Member 'AOEBase_C_InitializeFxParams::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_InitializeFxParams, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000011, "Member 'AOEBase_C_InitializeFxParams::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AOEBase_C_InitializeFxParams, CallFunc_SetFloatParameter_Param_ImplicitCast) == 0x000014, "Member 'AOEBase_C_InitializeFxParams::CallFunc_SetFloatParameter_Param_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AOEBase_C_InitializeFxParams, CallFunc_SetFloatParameter_Param_ImplicitCast_1) == 0x000018, "Member 'AOEBase_C_InitializeFxParams::CallFunc_SetFloatParameter_Param_ImplicitCast_1' has a wrong offset!");

// Function AOEBase.AOEBase_C.StartFadeIn
// 0x0018 (0x0018 - 0x0000)
struct AOEBase_C_StartFadeIn final
{
public:
	EValidOutputPin                               CallFunc_FindAkComponentWithValid_OutputPins;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UM1AkComponent*                         CallFunc_FindAkComponentWithValid_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AOEBase_C_StartFadeIn) == 0x000008, "Wrong alignment on AOEBase_C_StartFadeIn");
static_assert(sizeof(AOEBase_C_StartFadeIn) == 0x000018, "Wrong size on AOEBase_C_StartFadeIn");
static_assert(offsetof(AOEBase_C_StartFadeIn, CallFunc_FindAkComponentWithValid_OutputPins) == 0x000000, "Member 'AOEBase_C_StartFadeIn::CallFunc_FindAkComponentWithValid_OutputPins' has a wrong offset!");
static_assert(offsetof(AOEBase_C_StartFadeIn, CallFunc_FindAkComponentWithValid_ReturnValue) == 0x000008, "Member 'AOEBase_C_StartFadeIn::CallFunc_FindAkComponentWithValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_StartFadeIn, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'AOEBase_C_StartFadeIn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_StartFadeIn, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'AOEBase_C_StartFadeIn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AOEBase.AOEBase_C.StartFadeOut
// 0x0018 (0x0018 - 0x0000)
struct AOEBase_C_StartFadeOut final
{
public:
	EValidOutputPin                               CallFunc_FindAkComponentWithValid_OutputPins;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UM1AkComponent*                         CallFunc_FindAkComponentWithValid_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AOEBase_C_StartFadeOut) == 0x000008, "Wrong alignment on AOEBase_C_StartFadeOut");
static_assert(sizeof(AOEBase_C_StartFadeOut) == 0x000018, "Wrong size on AOEBase_C_StartFadeOut");
static_assert(offsetof(AOEBase_C_StartFadeOut, CallFunc_FindAkComponentWithValid_OutputPins) == 0x000000, "Member 'AOEBase_C_StartFadeOut::CallFunc_FindAkComponentWithValid_OutputPins' has a wrong offset!");
static_assert(offsetof(AOEBase_C_StartFadeOut, CallFunc_FindAkComponentWithValid_ReturnValue) == 0x000008, "Member 'AOEBase_C_StartFadeOut::CallFunc_FindAkComponentWithValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_StartFadeOut, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'AOEBase_C_StartFadeOut::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AOEBase_C_StartFadeOut, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'AOEBase_C_StartFadeOut::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AOEBase.AOEBase_C.UserConstructionScript
// 0x0001 (0x0001 - 0x0000)
struct AOEBase_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AOEBase_C_UserConstructionScript) == 0x000001, "Wrong alignment on AOEBase_C_UserConstructionScript");
static_assert(sizeof(AOEBase_C_UserConstructionScript) == 0x000001, "Wrong size on AOEBase_C_UserConstructionScript");
static_assert(offsetof(AOEBase_C_UserConstructionScript, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000000, "Member 'AOEBase_C_UserConstructionScript::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

}

