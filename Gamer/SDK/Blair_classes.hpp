#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Blair

#include "Basic.hpp"

#include "PlayerBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Blair.Blair_C
// 0x0030 (0x1100 - 0x10D0)
class ABlair_C final : public APlayerBase_C
{
public:
	class UM1PlayerBeamComponent*                 M1PlayerBeam;                                      // 0x10C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UM1WindDirectionalSourceComponent*      WindActive4;                                       // 0x10D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UM1WindDirectionalSourceComponent*      WindActive3;                                       // 0x10D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AAOE_Blair_Base_C*>              SpawnedAOEs;                                       // 0x10E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, Transient, DisableEditOnInstance)
	int32                                         WithinRangeAOECount;                               // 0x10F0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAppliedVFX;                                       // 0x10F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddAOE(class AAOE_Blair_Base_C* NewAOE);
	void GetAOEs(double InRange, TArray<class AAOE_Blair_Base_C*>* AOEs);
	void HasAOEs(double InRange, bool* bResult);
	void RemoveAOE(class AAOE_Blair_Base_C* RemoveAOE_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Blair_C">();
	}
	static class ABlair_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlair_C>();
	}
};
static_assert(alignof(ABlair_C) == 0x000010, "Wrong alignment on ABlair_C");
static_assert(sizeof(ABlair_C) == 0x001100, "Wrong size on ABlair_C");
static_assert(offsetof(ABlair_C, M1PlayerBeam) == 0x0010C8, "Member 'ABlair_C::M1PlayerBeam' has a wrong offset!");
static_assert(offsetof(ABlair_C, WindActive4) == 0x0010D0, "Member 'ABlair_C::WindActive4' has a wrong offset!");
static_assert(offsetof(ABlair_C, WindActive3) == 0x0010D8, "Member 'ABlair_C::WindActive3' has a wrong offset!");
static_assert(offsetof(ABlair_C, SpawnedAOEs) == 0x0010E0, "Member 'ABlair_C::SpawnedAOEs' has a wrong offset!");
static_assert(offsetof(ABlair_C, WithinRangeAOECount) == 0x0010F0, "Member 'ABlair_C::WithinRangeAOECount' has a wrong offset!");
static_assert(offsetof(ABlair_C, bAppliedVFX) == 0x0010F4, "Member 'ABlair_C::bAppliedVFX' has a wrong offset!");

}

